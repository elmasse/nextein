#!/usr/bin/env node

import { join, resolve } from 'path'
import { spawn } from 'cross-spawn'
import { watchFile } from 'fs'
import pkg from '../../package.json'

if (pkg.peerDependencies) {
  Object.keys(pkg.peerDependencies).forEach(dependency => {
    try {
      // When 'npm link' is used it checks the clone location. Not the project.
      require.resolve(dependency)
    } catch (err) {
      console.warn(`${dependency} not found. Please install ${dependency} using 'npm install ${dependency}'`)
    }
  })
}

const defaultCommand = 'dev'
const commands = new Set([
  // 'init',
  'build',
  'export',
  defaultCommand
])

let cmd = process.argv[2]
let args

if (new Set(['--version', '-v']).has(cmd)) {
  console.log(`${pkg.name} v${pkg.version}`)
  process.exit(0)
}

if (new Set(['--help', '-h']).has(cmd)) {
  console.log(`
    Usage
      $ nextein <command>

    Available commands
      ${Array.from(commands).join(', ')}

    For more information run a command with the --help flag
      $ nextein dev --help
  `)
  process.exit(0)
}

if (commands.has(cmd)) {
  args = process.argv.slice(3)
} else {
  cmd = defaultCommand
  args = process.argv.slice(2)
}

let bin
if (cmd === defaultCommand) {
  bin = join(__dirname, 'nextein-' + cmd)
} else {
  bin = 'next'
  args.unshift(cmd)
}

const startProcess = () => {
  const proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2], env: { NEXT_TELEMETRY_DISABLED: 1, ...process.env } })
  proc.on('close', (code, signal) => {
    if (code !== null) {
      process.exit(code)
    }
    if (signal) {
      if (signal === 'SIGKILL') {
        process.exit(137)
      }
      console.log(`got signal ${signal}, exiting`)
      process.exit(1)
    }
    process.exit(0)
  })
  proc.on('error', (err) => {
    console.error(err)
    process.exit(1)
  })
  return proc
}

const restartProcess = (cur, prev) => {
  if (cur.size > 0 || prev.size > 0) {
    console.log('\n> Found a change in next.config.js, restarting the server...')
    // Don't listen to 'close' now since otherwise parent gets killed by listener
    proc.removeAllListeners('close')
    proc.kill()
    proc = startProcess()
  }
}

let proc = startProcess()
// const { pagesDirectory = resolve(process.cwd(), 'pages') } = getConfig(process.cwd())
const pagesDirectory = resolve(process.cwd(), 'pages')

if (cmd === 'dev') {
  watchFile(`${resolve(pagesDirectory, '..')}/next.config.js`, restartProcess)
}
